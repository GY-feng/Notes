#include "stm32f10x.h"                  // Device header


void PWM()
{
	/*
	1,RCC 时钟TIM喝GPIO打开
	2,时钟单元
	3，配置输出比较单元
	4，配置GPIO，复用推挽输出
	5，运行控制，启动计数器
	配置输出比较模块
	一个对应一个单元
	void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
	void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
	void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
	void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
	
	void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct);默认值
	
	void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);配置强制输出模式，运行中输出波形，少用
	
	配置预装功能，影子寄存器，在更新事件生效，少用
	void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
配置快速使能，少用
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
少用：
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
单独设置输出比较的极性的，带N：高级定时器里互补通道的配置，也可以在初始化调用
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
单独更改输出比较模式：
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode);
单独更改CCR值的函数（可以改占空比），重要
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1);
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2);
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3);
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4);
补充：仅高级定时器输出PWM要调用，使能主输出，否则不会输出
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState);

	*/
	//1开启时钟
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
  //2，选择时基单元的时钟
  TIM_InternalClockConfig(TIM2);//选择内部时钟（也是系统默认）
  //3，配置时基单元，ARR，RSC，CNT等
  TIM_TimeBaseInitTypeDef i;
  i.TIM_ClockDivision=1;//指定时钟分频，滤波器用
  i.TIM_CounterMode=TIM_CounterMode_Up;//计数器模式向上等

  //定时频率=72M/(PSC+1)/(ARR+1),定时1s=>定时频率为1
  //不要超65535
  i.TIM_Period=10000-1;//ARR
  i.TIM_Prescaler=7200-1;//PSC
  i.TIM_RepetitionCounter=0;//重复计数器，高级才有
  TIM_TimeBaseInit(TIM2,&i);
    
	
  //初始化输出比较单元
  TIM_OCInitTypeDef t;
  t.TIM_OCMode;
	t.TIM_OCPolarity;
	t.TIM_OutputState;
	t.TIM_Pulse;
TIM_OC1Init(TIM2,&t);
  //6，运行控制，使能一下计数器，定时器使能后，就会开始计数了，计数器更新后，触发中断
  TIM_Cmd(TIM2,ENABLE);
  

}